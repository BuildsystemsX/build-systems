// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jENqvBHbRPXMByDQmRe4G7
// Component: y8WKJEXfAa

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_build_systems.module.css"; // plasmic-import: jENqvBHbRPXMByDQmRe4G7/projectcss
import sty from "./PlasmicCover.module.css"; // plasmic-import: y8WKJEXfAa/css

export type PlasmicCover__VariantMembers = {
  carousel: "smart" | "sustainable" | "systems";
};
export type PlasmicCover__VariantsArgs = {
  carousel?: SingleChoiceArg<"smart" | "sustainable" | "systems">;
};
type VariantPropType = keyof PlasmicCover__VariantsArgs;
export const PlasmicCover__VariantProps = new Array<VariantPropType>(
  "carousel"
);

export type PlasmicCover__ArgsType = {};
type ArgPropType = keyof PlasmicCover__ArgsType;
export const PlasmicCover__ArgProps = new Array<ArgPropType>();

export type PlasmicCover__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultCoverProps {
  carousel?: SingleChoiceArg<"smart" | "sustainable" | "systems">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCover__RenderFunc(props: {
  variants: PlasmicCover__VariantsArgs;
  args: PlasmicCover__ArgsType;
  overrides: PlasmicCover__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "carousel",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.carousel
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootcarousel_smart]: hasVariant($state, "carousel", "smart"),
          [sty.rootcarousel_sustainable]: hasVariant(
            $state,
            "carousel",
            "sustainable"
          ),
          [sty.rootcarousel_systems]: hasVariant($state, "carousel", "systems")
        }
      )}
      onWheel={async event => {
        const $steps = {};
        $steps["updateCarousel"] =
          $state.carousel == "Smart"
            ? (() => {
                const actionArgs = {
                  vgroup: __wrapUserFunction(
                    {
                      type: "InteractionArgLoc",
                      actionName: "updateVariant",
                      interactionUuid: "MS22CmbJP",
                      componentUuid: "y8WKJEXfAa",
                      argName: "vgroup"
                    },
                    () => "carousel"
                  ),
                  operation: __wrapUserFunction(
                    {
                      type: "InteractionArgLoc",
                      actionName: "updateVariant",
                      interactionUuid: "MS22CmbJP",
                      componentUuid: "y8WKJEXfAa",
                      argName: "operation"
                    },
                    () => 0
                  ),
                  value: __wrapUserFunction(
                    {
                      type: "InteractionArgLoc",
                      actionName: "updateVariant",
                      interactionUuid: "MS22CmbJP",
                      componentUuid: "y8WKJEXfAa",
                      argName: "value"
                    },
                    () => "sustainable"
                  )
                };
                return __wrapUserFunction(
                  {
                    type: "InteractionLoc",
                    actionName: "updateVariant",
                    interactionUuid: "MS22CmbJP",
                    componentUuid: "y8WKJEXfAa"
                  },
                  () =>
                    (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }

                      p.set($state, vgroup, value);
                      return value;
                    })?.apply(null, [actionArgs]),
                  actionArgs
                );
              })()
            : undefined;
        if (
          typeof $steps["updateCarousel"] === "object" &&
          typeof $steps["updateCarousel"].then === "function"
        ) {
          $steps["updateCarousel"] = await __wrapUserPromise(
            {
              type: "InteractionLoc",
              actionName: "updateVariant",
              interactionUuid: "MS22CmbJP",
              componentUuid: "y8WKJEXfAa"
            },
            $steps["updateCarousel"]
          );
        }
      }}
    >
      {(hasVariant($state, "carousel", "smart") ? true : true) ? (
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__qJ50B,
            {
              [sty.textcarousel_smart__qJ50Bras7R]: hasVariant(
                $state,
                "carousel",
                "smart"
              )
            }
          )}
        >
          {"Smart1"}
        </div>
      ) : null}
      {(hasVariant($state, "carousel", "sustainable") ? true : true) ? (
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___6AZvo,
            {
              [sty.textcarousel_sustainable___6AZvoMfGii]: hasVariant(
                $state,
                "carousel",
                "sustainable"
              )
            }
          )}
        >
          {"Sustainable"}
        </div>
      ) : null}
      {(hasVariant($state, "carousel", "systems") ? true : true) ? (
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__v9WFv,
            {
              [sty.textcarousel_systems__v9WFvNbM]: hasVariant(
                $state,
                "carousel",
                "systems"
              )
            }
          )}
        >
          {"Systems"}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCover__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCover__VariantsArgs;
    args?: PlasmicCover__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCover__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCover__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCover__ArgProps,
          internalVariantPropNames: PlasmicCover__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCover__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCover";
  } else {
    func.displayName = `PlasmicCover.${nodeName}`;
  }
  return func;
}

export const PlasmicCover = Object.assign(
  // Top-level PlasmicCover renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicCover
    internalVariantProps: PlasmicCover__VariantProps,
    internalArgProps: PlasmicCover__ArgProps
  }
);

export default PlasmicCover;
/* prettier-ignore-end */
