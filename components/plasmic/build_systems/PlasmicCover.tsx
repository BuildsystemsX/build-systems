// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jENqvBHbRPXMByDQmRe4G7
// Component: y8WKJEXfAa

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import BuildSystemsHeadline from "../../BuildSystemsHeadline"; // plasmic-import: k0tLqKtuC3/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_build_systems.module.css"; // plasmic-import: jENqvBHbRPXMByDQmRe4G7/projectcss
import sty from "./PlasmicCover.module.css"; // plasmic-import: y8WKJEXfAa/css

export type PlasmicCover__VariantMembers = {
  scroll2: "scroll2";
};
export type PlasmicCover__VariantsArgs = {
  scroll2?: SingleBooleanChoiceArg<"scroll2">;
};
type VariantPropType = keyof PlasmicCover__VariantsArgs;
export const PlasmicCover__VariantProps = new Array<VariantPropType>("scroll2");

export type PlasmicCover__ArgsType = {};
type ArgPropType = keyof PlasmicCover__ArgsType;
export const PlasmicCover__ArgProps = new Array<ArgPropType>();

export type PlasmicCover__OverridesType = {
  root?: p.Flex<"div">;
  buildSystemsHeadline?: p.Flex<typeof BuildSystemsHeadline>;
};

export interface DefaultCoverProps {
  scroll2?: SingleBooleanChoiceArg<"scroll2">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCover__RenderFunc(props: {
  variants: PlasmicCover__VariantsArgs;
  args: PlasmicCover__ArgsType;
  overrides: PlasmicCover__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "scroll2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.scroll2
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries,
    $refs
  });

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root,
          { [sty.rootscroll2]: hasVariant($state, "scroll2", "scroll2") }
        )}
        onClick={async event => {
          const $steps = {};
          $steps["updateScroll2"] = true
            ? (() => {
                const actionArgs = {
                  vgroup: __wrapUserFunction(
                    {
                      type: "InteractionArgLoc",
                      actionName: "updateVariant",
                      interactionUuid: "yuAsWi6tI",
                      componentUuid: "y8WKJEXfAa",
                      argName: "vgroup"
                    },
                    () => "scroll2"
                  ),
                  operation: __wrapUserFunction(
                    {
                      type: "InteractionArgLoc",
                      actionName: "updateVariant",
                      interactionUuid: "yuAsWi6tI",
                      componentUuid: "y8WKJEXfAa",
                      argName: "operation"
                    },
                    () => 4
                  ),
                  value: __wrapUserFunction(
                    {
                      type: "InteractionArgLoc",
                      actionName: "updateVariant",
                      interactionUuid: "yuAsWi6tI",
                      componentUuid: "y8WKJEXfAa",
                      argName: "value"
                    },
                    () => "scroll2"
                  )
                };
                return __wrapUserFunction(
                  {
                    type: "InteractionLoc",
                    actionName: "updateVariant",
                    interactionUuid: "yuAsWi6tI",
                    componentUuid: "y8WKJEXfAa"
                  },
                  () =>
                    (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }

                      p.set($state, vgroup, true);
                      return true;
                    })?.apply(null, [actionArgs]),
                  actionArgs
                );
              })()
            : undefined;
          if (
            typeof $steps["updateScroll2"] === "object" &&
            typeof $steps["updateScroll2"].then === "function"
          ) {
            $steps["updateScroll2"] = await __wrapUserPromise(
              {
                type: "InteractionLoc",
                actionName: "updateVariant",
                interactionUuid: "yuAsWi6tI",
                componentUuid: "y8WKJEXfAa"
              },
              $steps["updateScroll2"]
            );
          }
        }}
        onTouchStart={async event => {
          const $steps = {};
          $steps["updateScroll2"] = true
            ? (() => {
                const actionArgs = {
                  vgroup: __wrapUserFunction(
                    {
                      type: "InteractionArgLoc",
                      actionName: "updateVariant",
                      interactionUuid: "1YIWn7RGx",
                      componentUuid: "y8WKJEXfAa",
                      argName: "vgroup"
                    },
                    () => "scroll2"
                  ),
                  operation: __wrapUserFunction(
                    {
                      type: "InteractionArgLoc",
                      actionName: "updateVariant",
                      interactionUuid: "1YIWn7RGx",
                      componentUuid: "y8WKJEXfAa",
                      argName: "operation"
                    },
                    () => 4
                  ),
                  value: __wrapUserFunction(
                    {
                      type: "InteractionArgLoc",
                      actionName: "updateVariant",
                      interactionUuid: "1YIWn7RGx",
                      componentUuid: "y8WKJEXfAa",
                      argName: "value"
                    },
                    () => "scroll2"
                  )
                };
                return __wrapUserFunction(
                  {
                    type: "InteractionLoc",
                    actionName: "updateVariant",
                    interactionUuid: "1YIWn7RGx",
                    componentUuid: "y8WKJEXfAa"
                  },
                  () =>
                    (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }

                      p.set($state, vgroup, true);
                      return true;
                    })?.apply(null, [actionArgs]),
                  actionArgs
                );
              })()
            : undefined;
          if (
            typeof $steps["updateScroll2"] === "object" &&
            typeof $steps["updateScroll2"].then === "function"
          ) {
            $steps["updateScroll2"] = await __wrapUserPromise(
              {
                type: "InteractionLoc",
                actionName: "updateVariant",
                interactionUuid: "1YIWn7RGx",
                componentUuid: "y8WKJEXfAa"
              },
              $steps["updateScroll2"]
            );
          }
        }}
        onWheel={async event => {
          const $steps = {};
          $steps["updateScroll2"] = true
            ? (() => {
                const actionArgs = {
                  vgroup: __wrapUserFunction(
                    {
                      type: "InteractionArgLoc",
                      actionName: "updateVariant",
                      interactionUuid: "u7ELaVOBl",
                      componentUuid: "y8WKJEXfAa",
                      argName: "vgroup"
                    },
                    () => "scroll2"
                  ),
                  operation: __wrapUserFunction(
                    {
                      type: "InteractionArgLoc",
                      actionName: "updateVariant",
                      interactionUuid: "u7ELaVOBl",
                      componentUuid: "y8WKJEXfAa",
                      argName: "operation"
                    },
                    () => 4
                  ),
                  value: __wrapUserFunction(
                    {
                      type: "InteractionArgLoc",
                      actionName: "updateVariant",
                      interactionUuid: "u7ELaVOBl",
                      componentUuid: "y8WKJEXfAa",
                      argName: "value"
                    },
                    () => "scroll2"
                  )
                };
                return __wrapUserFunction(
                  {
                    type: "InteractionLoc",
                    actionName: "updateVariant",
                    interactionUuid: "u7ELaVOBl",
                    componentUuid: "y8WKJEXfAa"
                  },
                  () =>
                    (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }

                      p.set($state, vgroup, true);
                      return true;
                    })?.apply(null, [actionArgs]),
                  actionArgs
                );
              })()
            : undefined;
          if (
            typeof $steps["updateScroll2"] === "object" &&
            typeof $steps["updateScroll2"].then === "function"
          ) {
            $steps["updateScroll2"] = await __wrapUserPromise(
              {
                type: "InteractionLoc",
                actionName: "updateVariant",
                interactionUuid: "u7ELaVOBl",
                componentUuid: "y8WKJEXfAa"
              },
              $steps["updateScroll2"]
            );
          }
        }}
      >
        {(hasVariant($state, "scroll2", "scroll2") ? true : true) ? (
          <div
            className={classNames(
              projectcss.all,
              sty.freeBox__fXbm,
              "hiddenScroll" as const,
              {
                [sty.freeBoxscroll2__fXbm1OLqA]: hasVariant(
                  $state,
                  "scroll2",
                  "scroll2"
                )
              }
            )}
          >
            {true ? (
              <div
                className={classNames(projectcss.all, sty.freeBox__hGQhz, {
                  [sty.freeBoxscroll2__hGQhz1OLqA]: hasVariant(
                    $state,
                    "scroll2",
                    "scroll2"
                  )
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hBw0D
                  )}
                >
                  {"Build"}
                </div>
              </div>
            ) : null}
            {true ? (
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox___3HFg,
                  "hiddenScroll" as const,
                  {
                    [sty.freeBoxscroll2___3HFg1OLqA]: hasVariant(
                      $state,
                      "scroll2",
                      "scroll2"
                    )
                  }
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tJ69J,
                    {
                      [sty.textscroll2__tJ69J1OLqA]: hasVariant(
                        $state,
                        "scroll2",
                        "scroll2"
                      )
                    }
                  )}
                >
                  {"Systems"}
                </div>
              </div>
            ) : null}
          </div>
        ) : null}
        {true ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__gbWuV, {
              [sty.freeBoxscroll2__gbWuV1OLqA]: hasVariant(
                $state,
                "scroll2",
                "scroll2"
              )
            })}
          >
            {(hasVariant($state, "scroll2", "scroll2") ? true : true) ? (
              <BuildSystemsHeadline
                data-plasmic-name={"buildSystemsHeadline"}
                data-plasmic-override={overrides.buildSystemsHeadline}
                big={
                  hasVariant($state, "scroll2", "scroll2") ? undefined : true
                }
                className={classNames(
                  "__wab_instance",
                  sty.buildSystemsHeadline,
                  {
                    [sty.buildSystemsHeadlinescroll2]: hasVariant(
                      $state,
                      "scroll2",
                      "scroll2"
                    )
                  }
                )}
                transparent={
                  hasVariant($state, "scroll2", "scroll2") ? true : undefined
                }
              />
            ) : null}
          </div>
        ) : null}
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "buildSystemsHeadline"],
  buildSystemsHeadline: ["buildSystemsHeadline"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  buildSystemsHeadline: typeof BuildSystemsHeadline;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCover__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCover__VariantsArgs;
    args?: PlasmicCover__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCover__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCover__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCover__ArgProps,
          internalVariantPropNames: PlasmicCover__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCover__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCover";
  } else {
    func.displayName = `PlasmicCover.${nodeName}`;
  }
  return func;
}

export const PlasmicCover = Object.assign(
  // Top-level PlasmicCover renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    buildSystemsHeadline: makeNodeComponent("buildSystemsHeadline"),

    // Metadata about props expected for PlasmicCover
    internalVariantProps: PlasmicCover__VariantProps,
    internalArgProps: PlasmicCover__ArgProps
  }
);

export default PlasmicCover;
/* prettier-ignore-end */
