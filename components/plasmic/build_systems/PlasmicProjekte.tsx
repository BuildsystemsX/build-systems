// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jENqvBHbRPXMByDQmRe4G7
// Component: fxr9ZT31qRP

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Menu from "../../Menu"; // plasmic-import: 5tZNLUygwX/component
import BuildSystemsHeadline from "../../BuildSystemsHeadline"; // plasmic-import: k0tLqKtuC3/component
import SmallButton from "../../SmallButton"; // plasmic-import: jdWzZYnBO3/component
import ImageFooter from "../../ImageFooter"; // plasmic-import: 7Stlw3wb0O/component
import HiderHeadlines from "../../HiderHeadlines"; // plasmic-import: q6j09HfKP8/component

import { useScreenVariants as useScreenVariantsjnTclXkDzSl7V } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jnTCLXkDZSl7V/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_build_systems.module.css"; // plasmic-import: jENqvBHbRPXMByDQmRe4G7/projectcss
import sty from "./PlasmicProjekte.module.css"; // plasmic-import: fxr9ZT31qRP/css

export type PlasmicProjekte__VariantMembers = {};
export type PlasmicProjekte__VariantsArgs = {};
type VariantPropType = keyof PlasmicProjekte__VariantsArgs;
export const PlasmicProjekte__VariantProps = new Array<VariantPropType>();

export type PlasmicProjekte__ArgsType = {};
type ArgPropType = keyof PlasmicProjekte__ArgsType;
export const PlasmicProjekte__ArgProps = new Array<ArgPropType>();

export type PlasmicProjekte__OverridesType = {
  root?: p.Flex<"div">;
  menuStack?: p.Flex<"div">;
  menu?: p.Flex<typeof Menu>;
  buildSystemsHeadline?: p.Flex<typeof BuildSystemsHeadline>;
  columns?: p.Flex<"div">;
  imageFooter?: p.Flex<typeof ImageFooter>;
  hiderHeadlines?: p.Flex<typeof HiderHeadlines>;
};

export interface DefaultProjekteProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProjekte__RenderFunc(props: {
  variants: PlasmicProjekte__VariantsArgs;
  args: PlasmicProjekte__ArgsType;
  overrides: PlasmicProjekte__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjnTclXkDzSl7V()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicProjekte.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicProjekte.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicProjekte.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicProjekte.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicProjekte.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicProjekte.pageMetadata.description}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"menuStack"}
            data-plasmic-override={overrides.menuStack}
            className={classNames(projectcss.all, sty.menuStack)}
          >
            <Menu
              data-plasmic-name={"menu"}
              data-plasmic-override={overrides.menu}
              className={classNames("__wab_instance", sty.menu)}
              expand={
                hasVariant(globalVariants, "screen", "iPhone")
                  ? undefined
                  : true
              }
              onSubSite={
                hasVariant(globalVariants, "screen", "iPhone")
                  ? []
                  : ["projekte"]
              }
            />
          </div>
          <BuildSystemsHeadline
            data-plasmic-name={"buildSystemsHeadline"}
            data-plasmic-override={overrides.buildSystemsHeadline}
            className={classNames("__wab_instance", sty.buildSystemsHeadline)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__iedGv)}>
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__nDwJx)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qrqk5
                  )}
                >
                  {
                    "Wir sind \u00fcberzeugt: Wenn die Projektentwicklung den Zusammenhang von Nachhaltigkeit, Wertbest\u00e4ndigkeit und Zukunftsf\u00e4higkeit nachvollziehen und ebenso darlegen kann, werden Klimaschutzma\u00dfnahmen zur intrinsischen Motivation. So entsteht neben Reporting-Zw\u00e4ngen und regulatorisch vorgeschriebenen Benchmarks ein stetiger Wandel zu einer nachhaltigen Baut\u00e4tigkeit."
                  }
                </div>
              </div>
            ) : null}
          </div>
          {(hasVariant(globalVariants, "screen", "iPhone") ? true : true) ? (
            <div className={classNames(projectcss.all, sty.freeBox___0ZUjb)} />
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox__slJFt)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___8H29R
              )}
            >
              {hasVariant(globalVariants, "screen", "iPhone")
                ? "                              setzt Projekte von Anfang an #integral / #systemisch / #transparent / #digital auf. "
                : "setzt Projekte von Anfang an #integral / #systemisch / #transparent / #digital auf. "}
            </div>
          </div>
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__ck3TH)}>
              <div className={classNames(projectcss.all, sty.freeBox___7Ju0Z)}>
                {true ? (
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"columns"}
                    data-plasmic-override={overrides.columns}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.columns)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__xh4E5)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__yDqAx
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___1IeQk)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/build_systems/images/image.png",
                            fullWidth: 760,
                            fullHeight: 507,
                            aspectRatio: undefined
                          }}
                        />

                        {true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ljdEt
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___3FqJk
                              )}
                            >
                              {"Schumacher Quartier"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__zl0Ru
                              )}
                            >
                              {
                                "Das Schumacher Quartier soll als reines Holzbauaurtier auf dem Gel\u00e4nde des ehemaligen Flughafen Tegel in Berlin entstehen. Das Modellquartier steht fu\u0308r \u00f6kologischen Neubau, Nutzungsmischung und innovative Mobilita\u0308tskonzepte sowie energetisch vorbildliche Geba\u0308ude innerhalb eines autoarmen Wohngebiets, das die ausreichende Gru\u0308nversorgung sicherstellt. "
                              }
                            </div>
                            <SmallButton
                              className={classNames(
                                "__wab_instance",
                                sty.smallButton___4YhS2
                              )}
                              noLeftSiteShift={true}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__m4Nso
                                )}
                              >
                                {"mehr Erfahren"}
                              </div>
                            </SmallButton>
                          </div>
                        ) : null}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__i9Zqv)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dEzr
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__uxT6W)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/build_systems/images/image.png",
                            fullWidth: 760,
                            fullHeight: 507,
                            aspectRatio: undefined
                          }}
                        />

                        {true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__u8F0G
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gjzQa
                              )}
                            >
                              {"Urban Scale Timber"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___7Soc
                              )}
                            >
                              {
                                "Der urbane Holzbau ist ein Schlu\u0308sselfaktor auf dem Weg zu klimaneutralen St\u00e4dten. Der Baustoff kann durch sein Potenzial als Kohlenstoffspeicher signifikant zur Reduzierung des 38%-Anteils des Bausektors an den globalen CO2-Emissionen beitragen. Urban Scale Timber bietet ein Tool fu\u0308r automatisierte holzbauspezifische Machbarkeitsstudien fu\u0308r private und \u00f6ffentliche Projektentwickler und Planerinnen und macht entsprechendes Fachwissen greifbar, um den Entwicklungsprozess von Holzbauprojekten zu skalieren, zu verbessern und zu beschleunigen. "
                              }
                            </div>
                            <SmallButton
                              className={classNames(
                                "__wab_instance",
                                sty.smallButton__oghGj
                              )}
                              noLeftSiteShift={true}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__pMslZ
                                )}
                              >
                                {"mehr Erfahren"}
                              </div>
                            </SmallButton>
                          </div>
                        ) : null}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column___9LDDs)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__iqkqa
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___4Qh9Z)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/build_systems/images/image.png",
                            fullWidth: 760,
                            fullHeight: 507,
                            aspectRatio: undefined
                          }}
                        />

                        {true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__yGvw8
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__apS19
                              )}
                            >
                              {"Schumacher Quartier"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__kPioR
                              )}
                            >
                              {
                                "Das Schumacher Quartier soll als reines Holzbauaurtier auf dem Gel\u00e4nde des ehemaligen Flughafen Tegel in Berlin entstehen. Das Modellquartier steht fu\u0308r \u00f6kologischen Neubau, Nutzungsmischung und innovative Mobilita\u0308tskonzepte sowie energetisch vorbildliche Geba\u0308ude innerhalb eines autoarmen Wohngebiets, das die ausreichende Gru\u0308nversorgung sicherstellt. "
                              }
                            </div>
                            <SmallButton
                              className={classNames(
                                "__wab_instance",
                                sty.smallButton__xgCC
                              )}
                              noLeftSiteShift={true}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__qqZwk
                                )}
                              >
                                {"mehr Erfahren"}
                              </div>
                            </SmallButton>
                          </div>
                        ) : null}
                      </div>
                    </div>
                  </p.Stack>
                ) : null}
              </div>
            </div>
          ) : null}
          {true ? (
            <ImageFooter
              data-plasmic-name={"imageFooter"}
              data-plasmic-override={overrides.imageFooter}
              className={classNames("__wab_instance", sty.imageFooter)}
            />
          ) : null}
          <HiderHeadlines
            data-plasmic-name={"hiderHeadlines"}
            data-plasmic-override={overrides.hiderHeadlines}
            className={classNames("__wab_instance", sty.hiderHeadlines)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "menuStack",
    "menu",
    "buildSystemsHeadline",
    "columns",
    "imageFooter",
    "hiderHeadlines"
  ],
  menuStack: ["menuStack", "menu"],
  menu: ["menu"],
  buildSystemsHeadline: ["buildSystemsHeadline"],
  columns: ["columns"],
  imageFooter: ["imageFooter"],
  hiderHeadlines: ["hiderHeadlines"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  menuStack: "div";
  menu: typeof Menu;
  buildSystemsHeadline: typeof BuildSystemsHeadline;
  columns: "div";
  imageFooter: typeof ImageFooter;
  hiderHeadlines: typeof HiderHeadlines;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProjekte__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProjekte__VariantsArgs;
    args?: PlasmicProjekte__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProjekte__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProjekte__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProjekte__ArgProps,
          internalVariantPropNames: PlasmicProjekte__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProjekte__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProjekte";
  } else {
    func.displayName = `PlasmicProjekte.${nodeName}`;
  }
  return func;
}

export const PlasmicProjekte = Object.assign(
  // Top-level PlasmicProjekte renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    menuStack: makeNodeComponent("menuStack"),
    menu: makeNodeComponent("menu"),
    buildSystemsHeadline: makeNodeComponent("buildSystemsHeadline"),
    columns: makeNodeComponent("columns"),
    imageFooter: makeNodeComponent("imageFooter"),
    hiderHeadlines: makeNodeComponent("hiderHeadlines"),

    // Metadata about props expected for PlasmicProjekte
    internalVariantProps: PlasmicProjekte__VariantProps,
    internalArgProps: PlasmicProjekte__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Build Systems",
      description:
        "Build Systems entwickelt individuelle Smart Sustainability Roadmaps (Nachhaltigkeits-fahrpläne).  Wir unterstützen Immobilienentwickler:innen in einer frühen Phase der Planung.",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicProjekte;
/* prettier-ignore-end */
