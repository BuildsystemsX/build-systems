// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jENqvBHbRPXMByDQmRe4G7
// Component: 9BsVqBrtAT1

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Menu from "../../Menu"; // plasmic-import: 5tZNLUygwX/component
import BuildSystemsHeadline from "../../BuildSystemsHeadline"; // plasmic-import: k0tLqKtuC3/component
import PersonBox from "../../PersonBox"; // plasmic-import: JED_FSQOoo/component
import ImageFooter from "../../ImageFooter"; // plasmic-import: 7Stlw3wb0O/component

import { useScreenVariants as useScreenVariantsjnTclXkDzSl7V } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jnTCLXkDZSl7V/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_build_systems.module.css"; // plasmic-import: jENqvBHbRPXMByDQmRe4G7/projectcss
import sty from "./PlasmicPersonen.module.css"; // plasmic-import: 9BsVqBrtAT1/css

export type PlasmicPersonen__VariantMembers = {};
export type PlasmicPersonen__VariantsArgs = {};
type VariantPropType = keyof PlasmicPersonen__VariantsArgs;
export const PlasmicPersonen__VariantProps = new Array<VariantPropType>();

export type PlasmicPersonen__ArgsType = {};
type ArgPropType = keyof PlasmicPersonen__ArgsType;
export const PlasmicPersonen__ArgProps = new Array<ArgPropType>();

export type PlasmicPersonen__OverridesType = {
  root?: p.Flex<"div">;
  menu?: p.Flex<typeof Menu>;
  buildSystemsHeadline?: p.Flex<typeof BuildSystemsHeadline>;
  imageFooter?: p.Flex<typeof ImageFooter>;
};

export interface DefaultPersonenProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPersonen__RenderFunc(props: {
  variants: PlasmicPersonen__VariantsArgs;
  args: PlasmicPersonen__ArgsType;
  overrides: PlasmicPersonen__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjnTclXkDzSl7V()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicPersonen.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicPersonen.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicPersonen.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicPersonen.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicPersonen.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicPersonen.pageMetadata.description}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__yqGkF)}>
            <Menu
              data-plasmic-name={"menu"}
              data-plasmic-override={overrides.menu}
              className={classNames("__wab_instance", sty.menu)}
              test={["personen"]}
            />
          </div>
          <BuildSystemsHeadline
            data-plasmic-name={"buildSystemsHeadline"}
            data-plasmic-override={overrides.buildSystemsHeadline}
            className={classNames("__wab_instance", sty.buildSystemsHeadline)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__riity)}>
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__zN7O3)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rZeUa
                  )}
                >
                  {"denkt #vernetzt."}
                </div>
              </div>
            ) : null}
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__pBnt6)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__d4KoG
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile")
                    ? "Build Systems entwickelt individuelle Smart Sustainability Roadmaps (Nachhaltigkeits-fahrpl\u00e4ne). Hierf\u00fcr stellen wir Nachhaltigkeitsanforderungen der individuellen Projektentwicklung \u00f6konomischen Indikatoren gegen\u00fcber. Wir unterst\u00fctzen Immobilienentwickler:innen in einer fr\u00fchen Phase der Planung Investitionsentscheidungen zu treffen."
                    : "Wir vertreten nicht nur einen integralen Prozess in der Planung, wir leben Interdisziplinarit\u00e4t im Team: Jeder bringt einen Baustein der ganzheitlichen Betrachtung mit ein. Gemeinsam erfassen wir \u00f6kologische Anforderungen auf allen Ebenen und setzen die Gesamtwirkung der Ma\u00dfnahmen zur Emissionsreduktion in den sozio\u00f6konomischen Fokus."}
                </div>
              </div>
            ) : null}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__cYVnn)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__msWiq
              )}
            >
              {"fu\u0308hrt #Kompetenzen zusammen"}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___3Ke2E)}>
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox___1CKvB)}>
                <PersonBox
                  className={classNames("__wab_instance", sty.personBox__qjRtW)}
                  slot={"Martin Bittmann"}
                >
                  {
                    "Dipl.-Ing. Architektur\n\nArchitekt Bay. Architektenkammer, Energieeffizienz-Experte, Nachhaltiges Bauen in Holz, Energetische Betrachtungen, Projektmanagement & -entwicklung"
                  }
                </PersonBox>
                <PersonBox
                  className={classNames("__wab_instance", sty.personBox__dOy15)}
                  slot={"Julia Dorn"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dm1D9
                    )}
                  >
                    {
                      "M.Sc. Urban Design, B.Sc. Architektur\n\nUrbane Transformation, Anforderungen EU Taxonomie und Nachhaltig-\nkeitsreporting, Kommunikation, Akteursmanagement & Moderation"
                    }
                  </div>
                </PersonBox>
                <PersonBox
                  className={classNames("__wab_instance", sty.personBox__sbHWq)}
                  slot={"Daniel Dieren"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8YBaf
                    )}
                  >
                    {
                      "M.Sc. Bauingenieur, M.Sc. Architektur\n\nNachhaltiges Konstruieren, Ingenieurholzbau, Integrale Planung, Lebenszyklusbetrachtung"
                    }
                  </div>
                </PersonBox>
                <PersonBox
                  className={classNames(
                    "__wab_instance",
                    sty.personBox___55Hka
                  )}
                  slot={"Daniel Locatelli"}
                >
                  {
                    "M.Sc. ITECH, Dipl. Architektur\n\nComputational Design, Parametrische Systeme, Entwicklung digitaler Tools und Workflows, Digitale Fabrikation"
                  }
                </PersonBox>
                <PersonBox
                  className={classNames("__wab_instance", sty.personBox__cDjn)}
                  slot={"Vinzenz Trimborn"}
                >
                  {
                    "B.Sc. Wirtschaftsinformatik\n\nSoftwareentwicklung, Digitale Planung, Implementierung digitale Workflows"
                  }
                </PersonBox>
                <PersonBox
                  className={classNames("__wab_instance", sty.personBox__vEf5N)}
                  slot={"Andreas Thoma"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hgfxB
                    )}
                  >
                    {"M.Sc. Architektur"}
                  </div>
                </PersonBox>
              </div>
            ) : null}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__l40T)} />

          <ImageFooter
            data-plasmic-name={"imageFooter"}
            data-plasmic-override={overrides.imageFooter}
            className={classNames("__wab_instance", sty.imageFooter)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "menu", "buildSystemsHeadline", "imageFooter"],
  menu: ["menu"],
  buildSystemsHeadline: ["buildSystemsHeadline"],
  imageFooter: ["imageFooter"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  menu: typeof Menu;
  buildSystemsHeadline: typeof BuildSystemsHeadline;
  imageFooter: typeof ImageFooter;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPersonen__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPersonen__VariantsArgs;
    args?: PlasmicPersonen__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPersonen__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPersonen__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPersonen__ArgProps,
          internalVariantPropNames: PlasmicPersonen__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPersonen__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPersonen";
  } else {
    func.displayName = `PlasmicPersonen.${nodeName}`;
  }
  return func;
}

export const PlasmicPersonen = Object.assign(
  // Top-level PlasmicPersonen renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    menu: makeNodeComponent("menu"),
    buildSystemsHeadline: makeNodeComponent("buildSystemsHeadline"),
    imageFooter: makeNodeComponent("imageFooter"),

    // Metadata about props expected for PlasmicPersonen
    internalVariantProps: PlasmicPersonen__VariantProps,
    internalArgProps: PlasmicPersonen__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Build Systems",
      description:
        "Build Systems entwickelt individuelle Smart Sustainability Roadmaps (Nachhaltigkeits-fahrpläne).  Wir unterstützen Immobilienentwickler:innen in einer frühen Phase der Planung.",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPersonen;
/* prettier-ignore-end */
