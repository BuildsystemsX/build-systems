// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jENqvBHbRPXMByDQmRe4G7
// Component: JED_FSQOoo

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SmallButton from "../../SmallButton"; // plasmic-import: jdWzZYnBO3/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_build_systems.module.css"; // plasmic-import: jENqvBHbRPXMByDQmRe4G7/projectcss
import sty from "./PlasmicPersonBox.module.css"; // plasmic-import: JED_FSQOoo/css

export type PlasmicPersonBox__VariantMembers = {
  expanded: "expanded";
};
export type PlasmicPersonBox__VariantsArgs = {
  expanded?: SingleBooleanChoiceArg<"expanded">;
};
type VariantPropType = keyof PlasmicPersonBox__VariantsArgs;
export const PlasmicPersonBox__VariantProps = new Array<VariantPropType>(
  "expanded"
);

export type PlasmicPersonBox__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  children2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicPersonBox__ArgsType;
export const PlasmicPersonBox__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "children2"
);

export type PlasmicPersonBox__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  smallButton?: p.Flex<typeof SmallButton>;
  text?: p.Flex<"div">;
};

export interface DefaultPersonBoxProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  children2?: React.ReactNode;
  expanded?: SingleBooleanChoiceArg<"expanded">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPersonBox__RenderFunc(props: {
  variants: PlasmicPersonBox__VariantsArgs;
  args: PlasmicPersonBox__ArgsType;
  overrides: PlasmicPersonBox__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "expanded",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.expanded
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root,
          { [sty.rootexpanded]: hasVariant($state, "expanded", "expanded") }
        )}
      >
        <div className={classNames(projectcss.all, sty.freeBox__xTsx6)}>
          <div className={classNames(projectcss.all, sty.freeBox__q5J1D)}>
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__awoI9)}>
                <p.PlasmicImg
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"135px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/build_systems/images/image2.png",
                    fullWidth: 135,
                    fullHeight: 135,
                    aspectRatio: undefined
                  }}
                />
              </div>
            ) : null}
            <div
              className={classNames(projectcss.all, sty.freeBox___5Lmv3, {
                [sty.freeBoxexpanded___5Lmv3NnpJu]: hasVariant(
                  $state,
                  "expanded",
                  "expanded"
                )
              })}
            >
              <div className={classNames(projectcss.all, sty.freeBox__xqBtG)}>
                {p.renderPlasmicSlot({
                  defaultContents: "First Name Last Name",
                  value: args.slot,
                  className: classNames(sty.slotTargetSlot, {
                    [sty.slotTargetSlotexpanded]: hasVariant(
                      $state,
                      "expanded",
                      "expanded"
                    )
                  })
                })}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__dFmZ3)}>
                {p.renderPlasmicSlot({
                  defaultContents:
                    "Title\n\nArchitekt Bay. Architektenkammer, Energieeffizienz-Experte, Nachhaltiges Bauen in Holz, Energetische Betrachtungen, Projektmanagement & -entwicklung",
                  value: args.children,
                  className: classNames(sty.slotTargetChildren, {
                    [sty.slotTargetChildrenexpanded]: hasVariant(
                      $state,
                      "expanded",
                      "expanded"
                    )
                  })
                })}
              </div>
              {true ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__ppBiU, {
                    [sty.freeBoxexpanded__ppBiUnnpJu]: hasVariant(
                      $state,
                      "expanded",
                      "expanded"
                    )
                  })}
                >
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__nL7ZG)}
                      onClick={async event => {
                        const $steps = {};
                        $steps["updateExpanded"] = true
                          ? (() => {
                              const actionArgs = {
                                vgroup: __wrapUserFunction(
                                  {
                                    type: "InteractionArgLoc",
                                    actionName: "updateVariant",
                                    interactionUuid: "l-RJgoJVZ",
                                    componentUuid: "JED_FSQOoo",
                                    argName: "vgroup"
                                  },
                                  () => "expanded"
                                ),
                                operation: __wrapUserFunction(
                                  {
                                    type: "InteractionArgLoc",
                                    actionName: "updateVariant",
                                    interactionUuid: "l-RJgoJVZ",
                                    componentUuid: "JED_FSQOoo",
                                    argName: "operation"
                                  },
                                  () => 2
                                ),
                                value: __wrapUserFunction(
                                  {
                                    type: "InteractionArgLoc",
                                    actionName: "updateVariant",
                                    interactionUuid: "l-RJgoJVZ",
                                    componentUuid: "JED_FSQOoo",
                                    argName: "value"
                                  },
                                  () => "expanded"
                                )
                              };
                              return __wrapUserFunction(
                                {
                                  type: "InteractionLoc",
                                  actionName: "updateVariant",
                                  interactionUuid: "l-RJgoJVZ",
                                  componentUuid: "JED_FSQOoo"
                                },
                                () =>
                                  (({ vgroup, value }) => {
                                    if (typeof value === "string") {
                                      value = [value];
                                    }

                                    const oldValue = p.get($state, vgroup);
                                    p.set($state, vgroup, !oldValue);
                                    return !oldValue;
                                  })?.apply(null, [actionArgs]),
                                actionArgs
                              );
                            })()
                          : undefined;
                        if (
                          typeof $steps["updateExpanded"] === "object" &&
                          typeof $steps["updateExpanded"].then === "function"
                        ) {
                          $steps["updateExpanded"] = await __wrapUserPromise(
                            {
                              type: "InteractionLoc",
                              actionName: "updateVariant",
                              interactionUuid: "l-RJgoJVZ",
                              componentUuid: "JED_FSQOoo"
                            },
                            $steps["updateExpanded"]
                          );
                        }
                      }}
                    >
                      <SmallButton
                        data-plasmic-name={"smallButton"}
                        data-plasmic-override={overrides.smallButton}
                        className={classNames(
                          "__wab_instance",
                          sty.smallButton,
                          {
                            [sty.smallButtonexpanded]: hasVariant(
                              $state,
                              "expanded",
                              "expanded"
                            )
                          }
                        )}
                        plus={true}
                      >
                        <div
                          data-plasmic-name={"text"}
                          data-plasmic-override={overrides.text}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text,
                            {
                              [sty.textexpanded]: hasVariant(
                                $state,
                                "expanded",
                                "expanded"
                              )
                            }
                          )}
                        >
                          {hasVariant($state, "expanded", "expanded")
                            ? "-   weniger "
                            : "+   mehr "}
                        </div>
                      </SmallButton>
                    </div>
                  ) : null}
                </div>
              ) : null}
            </div>
          </div>
        </div>
        {(hasVariant($state, "expanded", "expanded") ? true : true) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__gfxOx, {
              [sty.freeBoxexpanded__gfxOxnnpJu]: hasVariant(
                $state,
                "expanded",
                "expanded"
              )
            })}
          >
            {(hasVariant($state, "expanded", "expanded") ? true : false)
              ? p.renderPlasmicSlot({
                  defaultContents:
                    "Martin Bittmann studierte Architektur an der TU M\u00fcnchen und der TU\nIstanbul und ist eingetragener Architekt in der Bayerischen\nArchitektenkammer. Bis Ende 2021 war er als selbst\u00e4ndiger Architekt t\u00e4tig und arbeitete parallel am Institut f\u00fcr Nachhaltigkeit, Baukonstruktion und Entwerfen von Prof. Ludloff an der Universit\u00e4t Stuttgart, wo er den Lehr-und Forschungsbereich Bauklasse Holz aufbaute. Zuvor arbeitete er als Projekt- und Wettbewerbsleiter bei Raumstation Architekten und unterrichtete vier Jahre am Lehrstuhl f\u00fcr Entwerfen und Holzbau von Prof.\nKaufmann an der TU M\u00fcnchen. Bei Raumstation Architekten war er an der Konzeptionierung und Ausf\u00fchrung von unterschiedlichen Holzbauprojekten beteiligt und arbeitete eng mit Investoren und Projektentwicklern zusammen. Dar\u00fcber hinaus arbeitete er bei Herzog & De Meuron (Basel) sowie im Bereich Immobilienentwicklung und\n-investment bei Euroboden (M\u00fcnchen). Seit der Initiierung von Urban Scale Timber konzentrierte Martin seinen Fokus auf die notwendige Prozessinnovation in der Planung und Umsetzung von nachhaltiger und resilienter Projektentwicklung.",
                  value: args.children2,
                  className: classNames(sty.slotTargetChildren2, {
                    [sty.slotTargetChildren2expanded]: hasVariant(
                      $state,
                      "expanded",
                      "expanded"
                    )
                  })
                })
              : null}
          </div>
        ) : null}
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "smallButton", "text"],
  img: ["img"],
  smallButton: ["smallButton", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof p.PlasmicImg;
  smallButton: typeof SmallButton;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPersonBox__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPersonBox__VariantsArgs;
    args?: PlasmicPersonBox__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPersonBox__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPersonBox__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPersonBox__ArgProps,
          internalVariantPropNames: PlasmicPersonBox__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPersonBox__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPersonBox";
  } else {
    func.displayName = `PlasmicPersonBox.${nodeName}`;
  }
  return func;
}

export const PlasmicPersonBox = Object.assign(
  // Top-level PlasmicPersonBox renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    smallButton: makeNodeComponent("smallButton"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicPersonBox
    internalVariantProps: PlasmicPersonBox__VariantProps,
    internalArgProps: PlasmicPersonBox__ArgProps
  }
);

export default PlasmicPersonBox;
/* prettier-ignore-end */
