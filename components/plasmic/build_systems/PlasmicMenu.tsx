// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jENqvBHbRPXMByDQmRe4G7
// Component: 5tZNLUygwX

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import MenuButton from "../../MenuButton"; // plasmic-import: SCcSFruGPD/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_build_systems.module.css"; // plasmic-import: jENqvBHbRPXMByDQmRe4G7/projectcss
import sty from "./PlasmicMenu.module.css"; // plasmic-import: 5tZNLUygwX/css

import BurgerSimpleSvgrepoComsvgIcon from "./icons/PlasmicIcon__BurgerSimpleSvgrepoComsvg"; // plasmic-import: Hj5vDQofk6/icon
import LineXlSvgrepoComsvgIcon from "./icons/PlasmicIcon__LineXlSvgrepoComsvg"; // plasmic-import: Nn_Pp4GgbS/icon

export type PlasmicMenu__VariantMembers = {
  onSubSite: "services" | "projekte" | "personen";
  expand: "expand";
};
export type PlasmicMenu__VariantsArgs = {
  onSubSite?: MultiChoiceArg<"services" | "projekte" | "personen">;
  expand?: SingleBooleanChoiceArg<"expand">;
};
type VariantPropType = keyof PlasmicMenu__VariantsArgs;
export const PlasmicMenu__VariantProps = new Array<VariantPropType>(
  "onSubSite",
  "expand"
);

export type PlasmicMenu__ArgsType = {};
type ArgPropType = keyof PlasmicMenu__ArgsType;
export const PlasmicMenu__ArgProps = new Array<ArgPropType>();

export type PlasmicMenu__OverridesType = {
  root?: p.Flex<"div">;
  start?: p.Flex<typeof MenuButton>;
  text?: p.Flex<"div">;
  services?: p.Flex<typeof MenuButton>;
  projekte?: p.Flex<typeof MenuButton>;
  personen?: p.Flex<typeof MenuButton>;
  svg?: p.Flex<"svg">;
};

export interface DefaultMenuProps {
  onSubSite?: MultiChoiceArg<"services" | "projekte" | "personen">;
  expand?: SingleBooleanChoiceArg<"expand">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMenu__RenderFunc(props: {
  variants: PlasmicMenu__VariantsArgs;
  args: PlasmicMenu__ArgsType;
  overrides: PlasmicMenu__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "onSubSite",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.onSubSite
      },
      {
        path: "expand",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.expand
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries,
    $refs
  });

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root,
          {
            [sty.rootexpand]: hasVariant($state, "expand", "expand"),
            [sty.rootonSubSite_personen]: hasVariant(
              $state,
              "onSubSite",
              "personen"
            ),
            [sty.rootonSubSite_projekte]: hasVariant(
              $state,
              "onSubSite",
              "projekte"
            ),
            [sty.rootonSubSite_services]: hasVariant(
              $state,
              "onSubSite",
              "services"
            )
          }
        )}
        onMouseLeave={async event => {
          const $steps = {};
          $steps["updateExpand"] = true
            ? (() => {
                const actionArgs = {
                  vgroup: __wrapUserFunction(
                    {
                      type: "InteractionArgLoc",
                      actionName: "updateVariant",
                      interactionUuid: "40iWjAHdY",
                      componentUuid: "5tZNLUygwX",
                      argName: "vgroup"
                    },
                    () => "expand"
                  ),
                  operation: __wrapUserFunction(
                    {
                      type: "InteractionArgLoc",
                      actionName: "updateVariant",
                      interactionUuid: "40iWjAHdY",
                      componentUuid: "5tZNLUygwX",
                      argName: "operation"
                    },
                    () => 6
                  )
                };
                return __wrapUserFunction(
                  {
                    type: "InteractionLoc",
                    actionName: "updateVariant",
                    interactionUuid: "40iWjAHdY",
                    componentUuid: "5tZNLUygwX"
                  },
                  () =>
                    (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }

                      p.set($state, vgroup, false);
                      return false;
                    })?.apply(null, [actionArgs]),
                  actionArgs
                );
              })()
            : undefined;
          if (
            typeof $steps["updateExpand"] === "object" &&
            typeof $steps["updateExpand"].then === "function"
          ) {
            $steps["updateExpand"] = await __wrapUserPromise(
              {
                type: "InteractionLoc",
                actionName: "updateVariant",
                interactionUuid: "40iWjAHdY",
                componentUuid: "5tZNLUygwX"
              },
              $steps["updateExpand"]
            );
          }
        }}
      >
        {true ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__zyI38, {
              [sty.freeBoxexpand__zyI38ByE14]: hasVariant(
                $state,
                "expand",
                "expand"
              ),
              [sty.freeBoxonSubSite_personen__zyI38Ui3Mn]: hasVariant(
                $state,
                "onSubSite",
                "personen"
              ),
              [sty.freeBoxonSubSite_projekte__zyI380US2U]: hasVariant(
                $state,
                "onSubSite",
                "projekte"
              ),
              [sty.freeBoxonSubSite_services__zyI387Laf7]: hasVariant(
                $state,
                "onSubSite",
                "services"
              )
            })}
          >
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__tkhkd,
                {
                  [sty.linkexpand__tkhkdByE14]: hasVariant(
                    $state,
                    "expand",
                    "expand"
                  ),
                  [sty.linkonSubSite_personen__tkhkdUi3Mn]: hasVariant(
                    $state,
                    "onSubSite",
                    "personen"
                  ),
                  [sty.linkonSubSite_projekte__tkhkd0US2U]: hasVariant(
                    $state,
                    "onSubSite",
                    "projekte"
                  ),
                  [sty.linkonSubSite_services__tkhkd7Laf7]: hasVariant(
                    $state,
                    "onSubSite",
                    "services"
                  )
                }
              )}
              component={Link}
              onClick={async event => {
                const $steps = {};
                $steps["updateExpand"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariant",
                            interactionUuid: "-m7R7WGR6",
                            componentUuid: "5tZNLUygwX",
                            argName: "vgroup"
                          },
                          () => "expand"
                        ),
                        operation: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariant",
                            interactionUuid: "-m7R7WGR6",
                            componentUuid: "5tZNLUygwX",
                            argName: "operation"
                          },
                          () => 2
                        )
                      };
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "updateVariant",
                          interactionUuid: "-m7R7WGR6",
                          componentUuid: "5tZNLUygwX"
                        },
                        () =>
                          (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            const oldValue = p.get($state, vgroup);
                            p.set($state, vgroup, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["updateExpand"] === "object" &&
                  typeof $steps["updateExpand"].then === "function"
                ) {
                  $steps["updateExpand"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariant",
                      interactionUuid: "-m7R7WGR6",
                      componentUuid: "5tZNLUygwX"
                    },
                    $steps["updateExpand"]
                  );
                }
                $steps["goToHomepage2"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "navigation",
                            interactionUuid: "T_ahSPfnB",
                            componentUuid: "5tZNLUygwX",
                            argName: "destination"
                          },
                          () => `/New`
                        )
                      };
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "navigation",
                          interactionUuid: "T_ahSPfnB",
                          componentUuid: "5tZNLUygwX"
                        },
                        () =>
                          (({ destination }) => {
                            __nextRouter?.push(destination);
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["goToHomepage2"] === "object" &&
                  typeof $steps["goToHomepage2"].then === "function"
                ) {
                  $steps["goToHomepage2"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "navigation",
                      interactionUuid: "T_ahSPfnB",
                      componentUuid: "5tZNLUygwX"
                    },
                    $steps["goToHomepage2"]
                  );
                }
              }}
              platform={"nextjs"}
            >
              {(
                hasVariant($state, "onSubSite", "personen")
                  ? true
                  : hasVariant($state, "onSubSite", "projekte")
                  ? true
                  : hasVariant($state, "onSubSite", "services")
                  ? true
                  : true
              ) ? (
                <MenuButton
                  data-plasmic-name={"start"}
                  data-plasmic-override={overrides.start}
                  className={classNames("__wab_instance", sty.start, {
                    [sty.startexpand]: hasVariant($state, "expand", "expand"),
                    [sty.startonSubSite_personen]: hasVariant(
                      $state,
                      "onSubSite",
                      "personen"
                    ),
                    [sty.startonSubSite_projekte]: hasVariant(
                      $state,
                      "onSubSite",
                      "projekte"
                    ),
                    [sty.startonSubSite_services]: hasVariant(
                      $state,
                      "onSubSite",
                      "services"
                    )
                  })}
                >
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {"Start"}
                  </div>
                </MenuButton>
              ) : null}
            </p.PlasmicLink>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__n149K,
                {
                  [sty.linkexpand__n149KByE14]: hasVariant(
                    $state,
                    "expand",
                    "expand"
                  ),
                  [sty.linkonSubSite_personen__n149KUi3Mn]: hasVariant(
                    $state,
                    "onSubSite",
                    "personen"
                  ),
                  [sty.linkonSubSite_projekte__n149K0US2U]: hasVariant(
                    $state,
                    "onSubSite",
                    "projekte"
                  ),
                  [sty.linkonSubSite_services__n149K7Laf7]: hasVariant(
                    $state,
                    "onSubSite",
                    "services"
                  )
                }
              )}
              component={Link}
              onClick={async event => {
                const $steps = {};
                $steps["updateExpand"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariant",
                            interactionUuid: "BDiMWkbCC",
                            componentUuid: "5tZNLUygwX",
                            argName: "vgroup"
                          },
                          () => "expand"
                        ),
                        operation: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariant",
                            interactionUuid: "BDiMWkbCC",
                            componentUuid: "5tZNLUygwX",
                            argName: "operation"
                          },
                          () => 2
                        )
                      };
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "updateVariant",
                          interactionUuid: "BDiMWkbCC",
                          componentUuid: "5tZNLUygwX"
                        },
                        () =>
                          (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            const oldValue = p.get($state, vgroup);
                            p.set($state, vgroup, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["updateExpand"] === "object" &&
                  typeof $steps["updateExpand"].then === "function"
                ) {
                  $steps["updateExpand"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariant",
                      interactionUuid: "BDiMWkbCC",
                      componentUuid: "5tZNLUygwX"
                    },
                    $steps["updateExpand"]
                  );
                }
                $steps["goToServices"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "navigation",
                            interactionUuid: "EJLeqhi4-",
                            componentUuid: "5tZNLUygwX",
                            argName: "destination"
                          },
                          () => `/services`
                        )
                      };
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "navigation",
                          interactionUuid: "EJLeqhi4-",
                          componentUuid: "5tZNLUygwX"
                        },
                        () =>
                          (({ destination }) => {
                            __nextRouter?.push(destination);
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["goToServices"] === "object" &&
                  typeof $steps["goToServices"].then === "function"
                ) {
                  $steps["goToServices"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "navigation",
                      interactionUuid: "EJLeqhi4-",
                      componentUuid: "5tZNLUygwX"
                    },
                    $steps["goToServices"]
                  );
                }
              }}
              platform={"nextjs"}
            >
              {(
                hasVariant($state, "onSubSite", "personen")
                  ? true
                  : hasVariant($state, "onSubSite", "projekte")
                  ? true
                  : hasVariant($state, "onSubSite", "services")
                  ? true
                  : true
              ) ? (
                <MenuButton
                  data-plasmic-name={"services"}
                  data-plasmic-override={overrides.services}
                  className={classNames("__wab_instance", sty.services, {
                    [sty.servicesexpand]: hasVariant(
                      $state,
                      "expand",
                      "expand"
                    ),
                    [sty.servicesonSubSite_personen]: hasVariant(
                      $state,
                      "onSubSite",
                      "personen"
                    ),
                    [sty.servicesonSubSite_projekte]: hasVariant(
                      $state,
                      "onSubSite",
                      "projekte"
                    ),
                    [sty.servicesonSubSite_services]: hasVariant(
                      $state,
                      "onSubSite",
                      "services"
                    )
                  })}
                >
                  {"Services"}
                </MenuButton>
              ) : null}
            </p.PlasmicLink>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__qraVz,
                {
                  [sty.linkexpand__qraVzByE14]: hasVariant(
                    $state,
                    "expand",
                    "expand"
                  ),
                  [sty.linkonSubSite_personen__qraVzUi3Mn]: hasVariant(
                    $state,
                    "onSubSite",
                    "personen"
                  ),
                  [sty.linkonSubSite_projekte__qraVz0US2U]: hasVariant(
                    $state,
                    "onSubSite",
                    "projekte"
                  ),
                  [sty.linkonSubSite_services__qraVz7Laf7]: hasVariant(
                    $state,
                    "onSubSite",
                    "services"
                  )
                }
              )}
              component={Link}
              onClick={async event => {
                const $steps = {};
                $steps["updateExpand"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariant",
                            interactionUuid: "rTxFejjws",
                            componentUuid: "5tZNLUygwX",
                            argName: "vgroup"
                          },
                          () => "expand"
                        ),
                        operation: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariant",
                            interactionUuid: "rTxFejjws",
                            componentUuid: "5tZNLUygwX",
                            argName: "operation"
                          },
                          () => 2
                        )
                      };
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "updateVariant",
                          interactionUuid: "rTxFejjws",
                          componentUuid: "5tZNLUygwX"
                        },
                        () =>
                          (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            const oldValue = p.get($state, vgroup);
                            p.set($state, vgroup, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["updateExpand"] === "object" &&
                  typeof $steps["updateExpand"].then === "function"
                ) {
                  $steps["updateExpand"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariant",
                      interactionUuid: "rTxFejjws",
                      componentUuid: "5tZNLUygwX"
                    },
                    $steps["updateExpand"]
                  );
                }
                $steps["goToProjekte"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "navigation",
                            interactionUuid: "7mcWyN_1q",
                            componentUuid: "5tZNLUygwX",
                            argName: "destination"
                          },
                          () => `/projekte`
                        )
                      };
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "navigation",
                          interactionUuid: "7mcWyN_1q",
                          componentUuid: "5tZNLUygwX"
                        },
                        () =>
                          (({ destination }) => {
                            __nextRouter?.push(destination);
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["goToProjekte"] === "object" &&
                  typeof $steps["goToProjekte"].then === "function"
                ) {
                  $steps["goToProjekte"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "navigation",
                      interactionUuid: "7mcWyN_1q",
                      componentUuid: "5tZNLUygwX"
                    },
                    $steps["goToProjekte"]
                  );
                }
              }}
              platform={"nextjs"}
            >
              {(
                hasVariant($state, "onSubSite", "personen")
                  ? true
                  : hasVariant($state, "onSubSite", "projekte")
                  ? true
                  : hasVariant($state, "onSubSite", "services")
                  ? true
                  : true
              ) ? (
                <MenuButton
                  data-plasmic-name={"projekte"}
                  data-plasmic-override={overrides.projekte}
                  className={classNames("__wab_instance", sty.projekte, {
                    [sty.projekteexpand]: hasVariant(
                      $state,
                      "expand",
                      "expand"
                    ),
                    [sty.projekteonSubSite_personen]: hasVariant(
                      $state,
                      "onSubSite",
                      "personen"
                    ),
                    [sty.projekteonSubSite_projekte]: hasVariant(
                      $state,
                      "onSubSite",
                      "projekte"
                    ),
                    [sty.projekteonSubSite_services]: hasVariant(
                      $state,
                      "onSubSite",
                      "services"
                    )
                  })}
                >
                  {"Projekte"}
                </MenuButton>
              ) : null}
            </p.PlasmicLink>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__h4FSf,
                {
                  [sty.linkexpand__h4FSfByE14]: hasVariant(
                    $state,
                    "expand",
                    "expand"
                  ),
                  [sty.linkonSubSite_personen__h4FSfUi3Mn]: hasVariant(
                    $state,
                    "onSubSite",
                    "personen"
                  ),
                  [sty.linkonSubSite_projekte__h4FSf0US2U]: hasVariant(
                    $state,
                    "onSubSite",
                    "projekte"
                  ),
                  [sty.linkonSubSite_services__h4FSf7Laf7]: hasVariant(
                    $state,
                    "onSubSite",
                    "services"
                  )
                }
              )}
              component={Link}
              onClick={async event => {
                const $steps = {};
                $steps["updateExpand"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariant",
                            interactionUuid: "d8TzXIrD2",
                            componentUuid: "5tZNLUygwX",
                            argName: "vgroup"
                          },
                          () => "expand"
                        ),
                        operation: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariant",
                            interactionUuid: "d8TzXIrD2",
                            componentUuid: "5tZNLUygwX",
                            argName: "operation"
                          },
                          () => 2
                        )
                      };
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "updateVariant",
                          interactionUuid: "d8TzXIrD2",
                          componentUuid: "5tZNLUygwX"
                        },
                        () =>
                          (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            const oldValue = p.get($state, vgroup);
                            p.set($state, vgroup, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["updateExpand"] === "object" &&
                  typeof $steps["updateExpand"].then === "function"
                ) {
                  $steps["updateExpand"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariant",
                      interactionUuid: "d8TzXIrD2",
                      componentUuid: "5tZNLUygwX"
                    },
                    $steps["updateExpand"]
                  );
                }
                $steps["goToPersonen"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "navigation",
                            interactionUuid: "84G1hXrmh",
                            componentUuid: "5tZNLUygwX",
                            argName: "destination"
                          },
                          () => `/personen`
                        )
                      };
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "navigation",
                          interactionUuid: "84G1hXrmh",
                          componentUuid: "5tZNLUygwX"
                        },
                        () =>
                          (({ destination }) => {
                            __nextRouter?.push(destination);
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["goToPersonen"] === "object" &&
                  typeof $steps["goToPersonen"].then === "function"
                ) {
                  $steps["goToPersonen"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "navigation",
                      interactionUuid: "84G1hXrmh",
                      componentUuid: "5tZNLUygwX"
                    },
                    $steps["goToPersonen"]
                  );
                }
              }}
              platform={"nextjs"}
            >
              {(
                hasVariant($state, "onSubSite", "personen")
                  ? true
                  : hasVariant($state, "onSubSite", "projekte")
                  ? true
                  : hasVariant($state, "onSubSite", "services")
                  ? true
                  : true
              ) ? (
                <MenuButton
                  data-plasmic-name={"personen"}
                  data-plasmic-override={overrides.personen}
                  className={classNames("__wab_instance", sty.personen, {
                    [sty.personenexpand]: hasVariant(
                      $state,
                      "expand",
                      "expand"
                    ),
                    [sty.personenonSubSite_personen]: hasVariant(
                      $state,
                      "onSubSite",
                      "personen"
                    ),
                    [sty.personenonSubSite_projekte]: hasVariant(
                      $state,
                      "onSubSite",
                      "projekte"
                    ),
                    [sty.personenonSubSite_services]: hasVariant(
                      $state,
                      "onSubSite",
                      "services"
                    )
                  })}
                >
                  {"Personen"}
                </MenuButton>
              ) : null}
            </p.PlasmicLink>
          </div>
        ) : null}
        <div
          className={classNames(projectcss.all, sty.freeBox__gn5HA, {
            [sty.freeBoxexpand__gn5HAByE14]: hasVariant(
              $state,
              "expand",
              "expand"
            ),
            [sty.freeBoxonSubSite_personen__gn5HAUi3Mn]: hasVariant(
              $state,
              "onSubSite",
              "personen"
            ),
            [sty.freeBoxonSubSite_projekte__gn5HA0US2U]: hasVariant(
              $state,
              "onSubSite",
              "projekte"
            ),
            [sty.freeBoxonSubSite_services__gn5HA7Laf7]: hasVariant(
              $state,
              "onSubSite",
              "services"
            )
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__ptCVk, {
              [sty.freeBoxexpand__ptCVkByE14]: hasVariant(
                $state,
                "expand",
                "expand"
              ),
              [sty.freeBoxonSubSite_personen__ptCVkUi3Mn]: hasVariant(
                $state,
                "onSubSite",
                "personen"
              ),
              [sty.freeBoxonSubSite_projekte__ptCVk0US2U]: hasVariant(
                $state,
                "onSubSite",
                "projekte"
              ),
              [sty.freeBoxonSubSite_services__ptCVk7Laf7]: hasVariant(
                $state,
                "onSubSite",
                "services"
              )
            })}
            onClick={async event => {
              const $steps = {};
              $steps["updateServicesVariant"] = true
                ? (() => {
                    const actionArgs = {
                      vgroup: __wrapUserFunction(
                        {
                          type: "InteractionArgLoc",
                          actionName: "updateVariant",
                          interactionUuid: "yzY0AUoXw",
                          componentUuid: "5tZNLUygwX",
                          argName: "vgroup"
                        },
                        () => "expand"
                      ),
                      operation: __wrapUserFunction(
                        {
                          type: "InteractionArgLoc",
                          actionName: "updateVariant",
                          interactionUuid: "yzY0AUoXw",
                          componentUuid: "5tZNLUygwX",
                          argName: "operation"
                        },
                        () => 2
                      )
                    };
                    return __wrapUserFunction(
                      {
                        type: "InteractionLoc",
                        actionName: "updateVariant",
                        interactionUuid: "yzY0AUoXw",
                        componentUuid: "5tZNLUygwX"
                      },
                      () =>
                        (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          const oldValue = p.get($state, vgroup);
                          p.set($state, vgroup, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]),
                      actionArgs
                    );
                  })()
                : undefined;
              if (
                typeof $steps["updateServicesVariant"] === "object" &&
                typeof $steps["updateServicesVariant"].then === "function"
              ) {
                $steps["updateServicesVariant"] = await __wrapUserPromise(
                  {
                    type: "InteractionLoc",
                    actionName: "updateVariant",
                    interactionUuid: "yzY0AUoXw",
                    componentUuid: "5tZNLUygwX"
                  },
                  $steps["updateServicesVariant"]
                );
              }
            }}
          >
            <p.PlasmicIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              PlasmicIconType={
                hasVariant($state, "expand", "expand")
                  ? LineXlSvgrepoComsvgIcon
                  : BurgerSimpleSvgrepoComsvgIcon
              }
              className={classNames(projectcss.all, sty.svg, {
                [sty.svgexpand]: hasVariant($state, "expand", "expand")
              })}
              role={"img"}
            />
          </div>
        </div>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "start", "text", "services", "projekte", "personen", "svg"],
  start: ["start", "text"],
  text: ["text"],
  services: ["services"],
  projekte: ["projekte"],
  personen: ["personen"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  start: typeof MenuButton;
  text: "div";
  services: typeof MenuButton;
  projekte: typeof MenuButton;
  personen: typeof MenuButton;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMenu__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMenu__VariantsArgs;
    args?: PlasmicMenu__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMenu__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMenu__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicMenu__ArgProps,
          internalVariantPropNames: PlasmicMenu__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMenu__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMenu";
  } else {
    func.displayName = `PlasmicMenu.${nodeName}`;
  }
  return func;
}

export const PlasmicMenu = Object.assign(
  // Top-level PlasmicMenu renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    start: makeNodeComponent("start"),
    text: makeNodeComponent("text"),
    services: makeNodeComponent("services"),
    projekte: makeNodeComponent("projekte"),
    personen: makeNodeComponent("personen"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicMenu
    internalVariantProps: PlasmicMenu__VariantProps,
    internalArgProps: PlasmicMenu__ArgProps
  }
);

export default PlasmicMenu;
/* prettier-ignore-end */
